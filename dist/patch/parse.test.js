"use strict";
// tslint:disable
Object.defineProperty(exports, "__esModule", { value: true });
var parse_1 = require("../patch/parse");
var patch = "diff --git a/banana.ts b/banana.ts\nindex 2de83dd..842652c 100644\n--- a/banana.ts\n+++ b/banana.ts\n@@ -1,5 +1,5 @@\n this\n is\n \n-a\n+\n file\n";
var invalidHeaders1 = "diff --git a/banana.ts b/banana.ts\nindex 2de83dd..842652c 100644\n--- a/banana.ts\n+++ b/banana.ts\n@@ -1,5 +1,4 @@\n this\n is\n \n-a\n+\n file\n";
var invalidHeaders2 = "diff --git a/banana.ts b/banana.ts\nindex 2de83dd..842652c 100644\n--- a/banana.ts\n+++ b/banana.ts\n@@ -1,4 +1,5 @@\n this\n is\n \n-a\n+\n file\n";
var invalidHeaders3 = "diff --git a/banana.ts b/banana.ts\nindex 2de83dd..842652c 100644\n--- a/banana.ts\n+++ b/banana.ts\n@@ -1,0 +1,5 @@\n this\n is\n \n-a\n+\n file\n";
var invalidHeaders4 = "diff --git a/banana.ts b/banana.ts\nindex 2de83dd..842652c 100644\n--- a/banana.ts\n+++ b/banana.ts\n@@ -1,5 +1,0 @@\n this\n is\n \n-a\n+\n file\n";
var invalidHeaders5 = "diff --git a/banana.ts b/banana.ts\nindex 2de83dd..842652c 100644\n--- a/banana.ts\n+++ b/banana.ts\n@@ -1,5 +1,5@@\n this\n is\n \n-a\n+\n file\n";
var accidentalBlankLine = "diff --git a/banana.ts b/banana.ts\nindex 2de83dd..842652c 100644\n--- a/banana.ts\n+++ b/banana.ts\n@@ -1,5 +1,5 @@\n this\n is\n\n-a\n+\n file\n";
var crlfLineBreaks = "diff --git a/banana.ts b/banana.ts\nnew file mode 100644\nindex 0000000..3e1267f\n--- /dev/null\n+++ b/banana.ts\n@@ -0,0 +1 @@\n+this is a new file\n".replace(/\n/g, "\r\n");
var modeChangeAndModifyAndRename = "diff --git a/numbers.txt b/banana.txt\nold mode 100644\nnew mode 100755\nsimilarity index 96%\nrename from numbers.txt\nrename to banana.txt\nindex fbf1785..92d2c5f\n--- a/numbers.txt\n+++ b/banana.txt\n@@ -1,4 +1,4 @@\n-one\n+ne\n \n two\n \n";
var oldStylePatch = "patch-package\n--- a/node_modules/graphql/utilities/assertValidName.js\n+++ b/node_modules/graphql/utilities/assertValidName.js\n@@ -41,10 +41,11 @@ function assertValidName(name) {\n  */\n function isValidNameError(name, node) {\n   !(typeof name === 'string') ? (0, _invariant2.default)(0, 'Expected string') : void 0;\n-  if (name.length > 1 && name[0] === '_' && name[1] === '_') {\n-    return new _GraphQLError.GraphQLError('Name \"' + name + '\" must not begin with \"__\", which is reserved by ' + 'GraphQL introspection.', node);\n-  }\n+  // if (name.length > 1 && name[0] === '_' && name[1] === '_') {\n+  //   return new _GraphQLError.GraphQLError('Name \"' + name + '\" must not begin with \"__\", which is reserved by ' + 'GraphQL introspection.', node);\n+  // }\n   if (!NAME_RX.test(name)) {\n     return new _GraphQLError.GraphQLError('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"' + name + '\" does not.', node);\n   }\n+\n }\n\\ No newline at end of file\n--- a/node_modules/graphql/utilities/assertValidName.mjs\n+++ b/node_modules/graphql/utilities/assertValidName.mjs\n@@ -29,9 +29,9 @@ export function assertValidName(name) {\n  */\n export function isValidNameError(name, node) {\n   !(typeof name === 'string') ? invariant(0, 'Expected string') : void 0;\n-  if (name.length > 1 && name[0] === '_' && name[1] === '_') {\n-    return new GraphQLError('Name \"' + name + '\" must not begin with \"__\", which is reserved by ' + 'GraphQL introspection.', node);\n-  }\n+  // if (name.length > 1 && name[0] === '_' && name[1] === '_') {\n+  //   return new GraphQLError('Name \"' + name + '\" must not begin with \"__\", which is reserved by ' + 'GraphQL introspection.', node);\n+  // }\n   if (!NAME_RX.test(name)) {\n     return new GraphQLError('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"' + name + '\" does not.', node);\n   }\n";
describe("the patch parser", function () {
    it("works for a simple case", function () {
        expect(parse_1.parsePatchFile(patch)).toMatchSnapshot();
    });
    it("fails when the patch file has invalid headers", function () {
        expect(function () { return parse_1.parsePatchFile(invalidHeaders1); }).toThrow();
        expect(function () { return parse_1.parsePatchFile(invalidHeaders2); }).toThrow();
        expect(function () { return parse_1.parsePatchFile(invalidHeaders3); }).toThrow();
        expect(function () { return parse_1.parsePatchFile(invalidHeaders4); }).toThrow();
        expect(function () { return parse_1.parsePatchFile(invalidHeaders5); }).toThrow();
    });
    it("is OK when blank lines are accidentally created", function () {
        expect(parse_1.parsePatchFile(accidentalBlankLine)).toEqual(parse_1.parsePatchFile(patch));
    });
    it("can handle files with CRLF line breaks", function () {
        expect(parse_1.parsePatchFile(crlfLineBreaks)).toMatchSnapshot();
    });
    it("works", function () {
        expect(parse_1.parsePatchFile(modeChangeAndModifyAndRename)).toMatchSnapshot();
        expect(parse_1.parsePatchFile(accidentalBlankLine)).toMatchSnapshot();
        expect(parse_1.parsePatchFile(modeChangeAndModifyAndRename)).toMatchSnapshot();
    });
    it.only("parses old-style patches", function () {
        expect(parse_1.parsePatchFile(oldStylePatch)).toMatchSnapshot();
    });
});
//# sourceMappingURL=data:application/json;base64,